.equ PORTB, 0x6000
.equ PORTA, 0x6001
.equ DDRB,  0x6002
.equ DDRA,  0x6003

; cold boot 
.equ COLDBOOTADDR, 0x0200
.equ COLDBOOT1, 0x65
.equ COLDBOOT2, 0x02

; display
.equ RS, 0b00100000
.equ RW, 0b01000000 ; low on write
.equ E,  0b10000000



.org 0x8000
	
init:
	; setup the VIA chip
	LDA #0xff
	STA DDRA
	STA DDRB
	
	; check for cold boot (0x0200 should have 0x65, 0x02)
	LDA COLDBOOTADDR
	CMP #COLDBOOT1
	BEQ warmboot

coldboot:
	; turn on a random LED to signify we're doing coldboot
	LDA #0x01
	STA PORTA

	; set memory so that future resets will be warmboots
	LDA #COLDBOOT1
	STA COLDBOOTADDR
	;LDA #COLDBOOT2
	;STA COLDBOOTADDR+1
	
	; prompt the LCD to know we need to be in 4-bit mode.
	; function set
	LDA #0b00101000 ; 4 bit mode, 2 lines of text, 8x5 chars
	JSR f_SendLcdInstruction

	; turn off the LED, coldboot over
	LDA 0x00
	STA PORTA
	
	; now we fall into warmboot.
warmboot:
	
	; function set
	LDA #0b00100000 ; 4 bit mode, 2 lines of text, 8x5 chars
	JSR f_SendLcdInstruction
	LDA #0b10000000 ; 4 bit mode, 2 lines of text, 8x5 chars
	JSR f_SendLcdInstruction
	
	
	; high order, low order
	
	; Display on/off Control
	LDA #0b00000000 ; Display on, cursor on, blink on
	JSR f_SendLcdInstruction
	LDA #0b11110000 ; Display on, cursor on, blink on
	JSR f_SendLcdInstruction
	
	; Entry mode set
	LDA #0b00000000 ; Increment for next char, do not scroll.
	JSR f_SendLcdInstruction
	LDA #0b01100000 ; Increment for next char, do not scroll.
	JSR f_SendLcdInstruction
	
	; Clear Display
	LDA #0b00000000 ; 
	JSR f_SendLcdInstruction
	LDA #0b00010000 ; 
	JSR f_SendLcdInstruction
	
	; Return home
	LDA #0b00000000 ; 
	JSR f_SendLcdInstruction
	LDA #0b00100000 ; 
	JSR f_SendLcdInstruction
	
	; Start sending data

	LDA #0b00100000
	JSR f_SendLcdChar
	LDA #0b00010000
	JSR f_SendLcdChar
	
	
end:
	BRA end
	
	
f_SendLcdInstruction: 
	; A - the instruction to send
	STA PORTB
	LDA #0
	STA PORTA
	LDA #E
	STA PORTA
	LDA #0
	STA PORTA
	RTS

	
f_SendLcdChar: 
	; A - the char to send
	STA PORTB
	LDA #RS
	STA PORTA
	LDA #RS | E
	STA PORTA
	LDA #RS
	STA PORTA
	RTS


.org 0xfffc
	; reset vector
.byte 0x00, 0x80, 0x00, 0x00